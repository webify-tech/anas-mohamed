(() => {
    'use strict';
    // Function to find multiple elements based on a selector or conditions
    const findElements = (queries, root = document) => {
        try {
            if (typeof queries === 'string') {
                return Array.from(root.querySelectorAll(queries));
            }

            if (Array.isArray(queries) && queries.length > 0) {
                const [firstQuery, ...restQueries] = queries;
                const firstElements = findElements(firstQuery, root);

                if (firstElements.length > 0) {
                    if (restQueries.length > 0) {
                        let allMatchingElements = [];
                        for (const element of firstElements) {
                            const matchingElements = findElements(restQueries, element);
                            allMatchingElements = allMatchingElements.concat(matchingElements);
                        }
                        return allMatchingElements;
                    } else {
                        return firstElements;
                    }
                }
                return [];
            }

            return [];
        } catch (error) {
            return [];
        }
    };

    // Add an event listener for a custom "ndsclick" event on the document body
    document.body.addEventListener('ndsclick', async event => {
        // Extract the detail object from the event
        const detail = event.detail;
        // Determine the correct key for the user's platform (Mac or other)
        const key = navigator.userAgent.indexOf('Mac') !== -1 ? 'metaKey' : 'ctrlKey';
        const firstOnly = message.first ?? false;
        const interval = detail.interval ?? 0;

        // Find the first matching element from the event targets
        const matchingElements = findElements(detail.css);
        if (firstOnly) {
            if (matchingElements.length > 1) {
                matchingElements = [matchingElements[0]];
            }
        }

        // batch clicking, clicking the target element directly
        if (matchingElements && matchingElements.length > 0) {
            // Create a new MouseEvent with specified properties
            const clickEvent = new MouseEvent('click', {
                view: window,
                bubbles: true,
                cancelable: true,
                [key]: detail.ctrl ?? '',
            });
            for (let i = 0; i < matchingElements.length; i++) {
                // Dispatch the click event on the matching element
                matchingElements[i].dispatchEvent(clickEvent);

                if (interval > 0) {
                    await new Promise(resolve => {
                        setTimeout(resolve, interval * 1000);
                    });
                }
            }
        }
    });
})();
